function love.load()
  love.physics.setMeter(64) --the height of a meter our worlds will be 64px
  world = love.physics.newWorld(0, 9.81*64, true) --create a world for the bodies to exist in with horizontal gravity of 0 and vertical gravity of 9.81
 
  objects = {} -- table to hold all our physical objects
 
  --let's create the ground
  objects.ground = {}
  objects.ground.body = love.physics.newBody(world, 1700/2, 1000-50/2, "static") --This places the ground object in the middle of the screen
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  objects.ground.shape = love.physics.newRectangleShape(200, 50) --Change the width(The first 200 number) to a larger number. If you change it to 1700, it will span the screen, if you change it to a large number like 25000,
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--  it will span off the screen, and then objects that get moved off the screen can still land on it and come back.
  objects.ground.fixture = love.physics.newFixture(objects.ground.body, objects.ground.shape, 1); --attach shape to body, and give it a density of 1
  
  --let's create a ball
  objects.ball = {}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  --Specify the world, the width(1700/2), the height(1700/2) and whether the object is static or dynamic(choose dynamic), like how it's done for the ground. This will place a ball in the middle of the screen
  --objects.ball.body = 
  --Create a circle shape with a radius of 20
  --objects.ball.shape = 
  --Attach fixture to body and give it a density of 1.
  --objects.ball.fixture =  
  --objects.ball.fixture:setRestitution(0.9) --This makes the ball bouncy. Decrease the number to decrease the bounciness of the ball.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
  --let's create a couple blocks to play around with
  objects.block1 = {}
  -- create the blocks body. Specify the world, the it's vertical position (200), and it's horizontal position(400), and whether it is dynamic or static(choose dynamic).
  -- create the blocks shape. Specify the height(100), and the width(50)
  -- Attach fixture to the the body. Give it a density of 5 so the the ball has to really hit the block hard to move it.
  
  objects.block2 = {}
	-- do the exact same thing you did for the first block. Give this second block a density of 2 though.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
  --initial graphics setup
  love.graphics.setBackgroundColor(0.41, 0.53, 0.97) --set the background color to blue
  love.window.setMode(1500, 750) --set the window dimensions to 1700(width) by 1000(height)
end
 
 
function love.update(dt)
  world:update(dt) --this puts the world into motion

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
  --here we are going to create some keyboard events
  if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
    objects.ball.body:applyForce(400, 0)	-- specify's the amount of force be applied to the ball horizontally
  --the left arrow key is down, then ...
  --elseif  
    -- do what is done for the right key, but use -400 instead to move the other way
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
    objects.ball.body:setPosition(1700/2, 1000/2)
    objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  end
end
 
function love.draw()
  love.graphics.setColor(0.28, 0.63, 0.05) -- set the drawing color to green for the ground
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Uncomment the next line
  --love.graphics.rectangle("fill", objects.ground.body:getX(), objects.ground.body:getY(), objects.ground.width, objects.ground.height) -- draw a "filled in" polygon using the ground's coordinates
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  --change the colour to red, values of 0.76, 0.18, and 0.05 must be passed to love.graphics.setColor in order to do this
  --love.graphics.setColor()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  --Uncomment the love.graphics.circle lines
  --love.graphics.circle("fill", objects.ball.body:getX(), objects.ball.body:getY(), objects.ball.shape:getRadius())
  --change the colour to grey, values of 0.2, 0.2, and 0.2 must be passed to love.graphics.setColor in order to do this
  --love.graphics.polygon("fill", objects.block1.body:getWorldPoints(objects.block1.shape:getPoints()))
  --love.graphics.polygon("fill", objects.block2.body:getWorldPoints(objects.block2.shape:getPoints()))
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
end