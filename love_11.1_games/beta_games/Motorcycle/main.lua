require("Camera")

function love.load()
  pause = false
  love.physics.setMeter(64) --the height of a meter our worlds will be 64px
  world = love.physics.newWorld(0, 9.81*64, true) --create a world for the bodies to exist in with horizontal gravity of 0 and vertical gravity of 9.81
 
  objects = {} -- table to hold all our physical objects
 
  --let's create the ground
  objects.ground = {}
  ground = {}
  ground.x = 1700/2 + Camera.x
  ground.y = 1000-50 + Camera.y
  ground.width = 1700
  ground.height = 50
  ground.body = love.physics.newBody(world, ground.x, 1000-50/2, "static") --remember, the shape (the rectangle we create next) anchors to the body from its center, so we have to move it to (1700/2, 1000-50/2)
  ground.shape = love.physics.newRectangleShape(ground.width, ground.height) --make a rectangle with a width of 1700 and a height of 50
  ground.fixture = love.physics.newFixture(ground.body, ground.shape, 1); --attach shape to body, give it a density of 1. 
  table.insert(objects.ground, ground)
  
   --let's create a ball
  objects.ball = {}
  objects.ball.x = 1700/2
  objects.ball.y = 1000/2
  objects.ball.width = 100
  objects.ball.height = 50
  
  objects.ball.body = love.physics.newBody(world, objects.ball.x, objects.ball.y, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
  objects.ball.shape = love.physics.newRectangleShape(objects.ball.width, objects.ball.height) --the ball's shape has a radius of 20
  objects.ball.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 1) -- Attach fixture to body and give it a density of 1.
  objects.ball.img = love.graphics.newImage('images/motorcycle.png')
  
  --initial graphics setup
  love.graphics.setBackgroundColor(0.41, 0.53, 0.97) --set the background color to a nice blue
  love.window.setMode(1700, 1000) --set the window dimensions to 650 by 650
end

function love.update(dt)

  if not pause then
	world:update(dt) --this puts the world into motion
	Camera:follow(dt, objects.ball.body)
  end
  Camera:update(dt)
 
  --here we are going to create some keyboard events
  --if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
  --  objects.ball.body:applyForce(400, 0)
  --elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
  --  objects.ball.body:applyForce(-400, 0)
  --elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
  --  objects.ball.body:setPosition(650/2, 650/2)
  --  objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  --end
  
  if love.keyboard.isDown('d') then
	objects.ball.body:applyForce(1000,0)
  end
  
end
 
function love.draw()
  love.graphics.print("Press space to pause")
  love.graphics.setColor(0.28, 0.63, 0.05) -- set the drawing color to green for the ground
 
  for _, groundPiece in pairs(objects.ground) do
	love.graphics.rectangle("fill", groundPiece.x - 850 - Camera.x, groundPiece.y - Camera.y, groundPiece.width, groundPiece.height) -- draw a "filled in" polygon using the ground's coordinates
  end
	--  These are the grounds coordinates. 		-11650	950	13350	950	13350	1000	-11650	1000
  
  --love.graphics.setColor(0.76, 0.18, 0.05) --set the drawing color to red for the ball
  --love.graphics.circle("fill", objects.ball.body:getX(), objects.ball.body:getY(), objects.ball.shape:getRadius())
  love.graphics.draw(objects.ball.img, objects.ball.body:getX()-Camera.x, (objects.ball.body:getY()-(objects.ball.height/objects.ball.img:getHeight())/2)-Camera.y, objects.ball.body:getAngle(), objects.ball.height/objects.ball.img:getHeight())
 
end

function love.keypressed(key)

	if key == "space" then
		pause = not pause
	end

end